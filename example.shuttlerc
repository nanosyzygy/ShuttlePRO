
# Copyright 2013 Eric Messick (FixedImagePhoto.com/Contact)
#
# Lines in this file starting with # are comments.

# This file is divided into paragraphs, each specifying the bindings to
# be used when the keyboard focus is on a specific window.  The
# paragraph is introduced with a line starting with [.  That line
# contains the paragraph name (which is only used for debugging output
# to help you in editing this file) followed by ], followed by a regular
# expression.  When the class or name of the focused window matches the
# regular expression (see regex(7)), the bindings in the paragraph will
# be in effect.  The program tries these regular expressions in order,
# and the first match is used.  It first tries to match the class
# (WM_CLASS property) of the window, since that usually provides the
# better clues for identifying an application. If that fails, it will
# then also try to match the window's title (WM_NAME property).

# NB: Try to be as specific with the regular expression as possible, in
# order to prevent accidental matches.  Often an application uses its
# name as the class name or in its title bar, in which case finding a
# suitable regex should be relatively easy.  See below for some
# examples.

# If there is no regex on the line, like the [Default] line near the
# bottom, the paragraph acts as a default.  Any window class and title
# which does not match any regex will use the default bindings.  Any
# keys which are not specified in the paragraph which does match will
# use the default bindings for those keys.

# While you are working on regular expressions to match your window
# names, is is useful to see the window names and classes, as well as
# the paragraph names which the program finds as you generate ShuttlePRO
# events.  Run the shuttle program in a terminal window and remove the
# comment character from the following line:

#DEBUG_REGEX

# Within a paragraph, key bindings are introduced with the name of the
# key or event being defined.  Keys are named K1 through K15.  Positions
# of the shuttle wheel are named S-7 through S-1 for counter-clockwise
# positions, S0 for the rest position in the center, and S1 through S7
# for the clockwise positions.  The jog wheel emits two events named JL
# and JR, for counter-clockwise and clockwise rotations respectively.

# Some programs may expect the shuttle wheel to work like a secondary
# jog wheel.  To accommodate these, key bindings can also be specified
# using the incremental shuttle events IL and IR, which indicate
# counter-clockwise and clockwise rotations, and work in the same
# fashion as the jog wheel (albeit with a limited range of -7 .. 7).

# The keys on the Contour Shuttle Pro v2 are arranged like this:
#
#          K1  K2  K3  K4
#        K5  K6  K7  K8  K9
#
#        K14     Jog    K15
#
#          K10        K11
#         K12          K13

# After the name of the key being bound, the remainder of the line is
# the sequence of X KeySyms which will be generated when that event is
# received.  Look up the KeySyms in /usr/include/X11/keysymdef.h.  In
# addition to the KeySym names found there, you can also use XK_Button_1
# for the left mouse button, XK_Button_2 for the middle mouse button,
# XK_Button_3 for the right mouse button, XK_Scroll_Up and
# XK_Scroll_Down for mouse scroll wheel events.  For sequences of one or
# more printable characters, you can just enclose them in double quotes.

# Each KeySym you specify will be pressed and released before the next
# KeySym is pressed.  If you wish a key to be held down, you can add a
# /D to the end of the KeySym.  For example:  XK_Shift_L/D,
# XK_Control_L/D or XK_Alt_L/D.  Such keys will be held down until you
# specify they should be released with a /U on the same KeySym name.
# They will all be released at the end of the binding anyway, so you
# usually won't have to use /U.

# Key bindings, whose names start with a K, allow for some extra
# options.  Since they generate separate events when pressed and
# released, you can control that as well.  Each non-modifier key is
# pressed and released in sequence except for the last which is not
# released until the shuttle key is released.  If you want to press more
# keys during the release sequence, you can put them after the special
# word "RELEASE".  Modifier keys specified with /D are released at the
# end of the press sequence, and re-pressed if there are any keys to be
# pressed after RELEASE.  If you don't want the modifier keys to be
# released (you want to use a ShuttlePRO key as Shift, for example) you
# can follow it with a /H instead of /D.

# If you want to see exactly how this file is parsed and converted into
# KeySym strokes, run the shuttle program in a terminal window and
# remove the comment character from the following line:

#DEBUG_STROKES

# You can also use the following option to have the recognized key
# bindings printed out as the program executes them, in the same format
# as DEBUG_STROKES:

#DEBUG_KEYS

# NOTE: The debugging options can also be specified on the command line
# using -d in conjunction with any of the letters r, s and k. Just -d
# without any option letter turns on all debugging options.

# As one of the main reasons to use a ShuttlePRO is video editing, I've
# included a sample set of bindings for Cinelerra as an example.

[Cinelerra Resources] ^Cinelerra: Resources$
 # use [Default], avoiding main Cinelerra rule

[Cinelerra Load] ^Cinelerra: Load$
 # use [Default], avoiding main Cinelerra rule

[Cinelerra] ^Cinelerra: [^[:space:]]*$

 K5 XK_KP_0     # Stop
 K9 XK_KP_3     # Play
 K12 XK_Home    # Beginning
 K13 XK_End     # End
 K14 "["        # Toggle in
 K15 "]"        # Toggle out

 S-3 XK_KP_Add  # Fast reverse
 S-2 XK_KP_6    # Play reverse
 S-1 XK_KP_5    # Slow reverse
 S0 XK_KP_0     # Stop
 S1 XK_KP_2     # Slow forward
 S2 XK_KP_3     # Play forward
 S3 XK_KP_Enter # Fast forward
 
 JL XK_KP_4     # Frame reverse
 JR XK_KP_1     # Frame forward


# AG <aggraef@gmail.com>: Here are some of the bindings that I use. They are
# for the Shuttle Xpress, so they use only a limited set of buttons.

# Shotcut (WM_CLASS is "shotcut")
# see https://www.shotcut.org/howtos/keyboard-shortcuts/

[Shotcut] ^shotcut$

 K7 XK_space    # Play/Pause
 K6 XK_Home     # Beginning
 K8 XK_End      # End
 K5 "I"         # Set In
 K9 "O"         # Set Out

# Shotcut uses the customary J-K-L shortcuts, each successive J or L key then
# increments the playback speed in the corresponding direction. Thus we can
# simply treat the shuttle like a secondary jog wheel here.
 IL "J"         # Rewind
 IR "L"         # Forward

# The jog wheel moves single frames to the left or the right.
 JL XK_Left     # Frame reverse
 JR XK_Right    # Frame forward


# Kdenlive has its own built-in support for the Shuttle, but as the
# shuttlepro program blocks the device when it's running, we include
# some sensible bindings here anyway (pretty much the same as Shotcut
# above, but the shuttle has to be treated a little differently).

[Kdenlive] ^kdenlive$

 K7 XK_space    # Play/Pause
 K6 XK_Home     # Beginning
 K8 XK_End      # End
 K5 "I"         # Set In
 K9 "O"         # Set Out

 S-3 "KJJJ"     # Rewind+2
 S-2 "KJJ"      # Rewind+1
 S-1 "KJ"       # Rewind
 S0 "K"         # Stop
 S1 "KL"        # Forward
 S2 "KLL"       # Forward+1
 S3 "KLLL"      # Forward+2

 JL XK_Left     # Frame reverse
 JR XK_Right    # Frame forward


# Default (mouse emulation)

[Default]
 K6 XK_Button_1
 K7 XK_Button_2
 K8 XK_Button_3
 JL XK_Scroll_Up
 JR XK_Scroll_Down
